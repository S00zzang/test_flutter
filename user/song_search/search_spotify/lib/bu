import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: SearchPage(),
    );
  }
}

class SearchPage extends StatefulWidget {
  const SearchPage({super.key});

  @override
  _SearchPageState createState() => _SearchPageState();
}

class _SearchPageState extends State<SearchPage> {
  final TextEditingController _controller = TextEditingController();
  List<Track> _tracks = [];
  bool _isLoading = false;

  // Spotify API에서 검색 결과를 가져오는 함수
  Future<void> _searchTrack(String query) async {
    setState(() {
      _isLoading = true;
    });

    // Spotify Web API 인증을 위한 Token 발급
    final String token = await _getAccessToken();

    // Spotify 검색 API 호출
    final Uri uri = Uri.parse(
        'https://api.spotify.com/v1/search?q=$query&type=track&limit=15');
    final response = await http.get(
      uri,
      headers: {
        'Authorization': 'Bearer $token',
      },
    );

    if (response.statusCode == 200) {
      final data = json.decode(response.body);
      setState(() {
        _isLoading = false;
        _tracks = (data['tracks']['items'] as List)
            .map((track) => Track.fromJson(track))
            .toList();
      });
    } else {
      setState(() {
        _isLoading = false;
      });
      print('Failed to fetch tracks: ${response.statusCode}');
    }
  }

  // Access Token을 얻기 위한 함수
  Future<String> _getAccessToken() async {
    const String clientId =
        'your-client-id'; // Spotify Developer에서 제공한 client ID
    const String clientSecret =
        'your-client-secret'; // Spotify Developer에서 제공한 client Secret

    final String authHeader =
        'Basic ${base64Encode(utf8.encode('$clientId:$clientSecret'))}';

    final Uri tokenUri = Uri.parse('https://accounts.spotify.com/api/token');
    final response = await http.post(
      tokenUri,
      headers: {
        'Authorization': authHeader,
      },
      body: {
        'grant_type': 'client_credentials',
      },
    );

    if (response.statusCode == 200) {
      final data = json.decode(response.body);
      return data['access_token'];
    } else {
      throw Exception('Failed to obtain access token');
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Spotify Search'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          children: [
            TextField(
              controller: _controller,
              decoration: InputDecoration(
                labelText: 'Search for a song or artist',
                suffixIcon: IconButton(
                  icon: const Icon(Icons.search),
                  onPressed: () {
                    if (_controller.text.isNotEmpty) {
                      _searchTrack(_controller.text);
                    }
                  },
                ),
              ),
            ),
            const SizedBox(height: 16),
            _isLoading
                ? const Center(child: CircularProgressIndicator())
                : Expanded(
                    child: ListView.builder(
                      itemCount: _tracks.length,
                      itemBuilder: (context, index) {
                        final track = _tracks[index];
                        return ListTile(
                          leading: Image.network(track.albumImageUrl),
                          title: Text(track.name),
                          subtitle: Text(track.artists.join(', ')),
                          onTap: () {
                            // 원하는 행동을 추가 (예: 링크 열기, 음악 재생 등)
                          },
                        );
                      },
                    ),
                  ),
          ],
        ),
      ),
    );
  }
}

// 트랙 정보 모델
class Track {
  final String name;
  final List<String> artists;
  final String albumImageUrl;

  Track({
    required this.name,
    required this.artists,
    required this.albumImageUrl,
  });

  factory Track.fromJson(Map<String, dynamic> json) {
    return Track(
      name: json['name'],
      artists: List<String>.from(json['artists'].map((a) => a['name'])),
      albumImageUrl: json['album']['images'][0]['url'],
    );
  }
}
